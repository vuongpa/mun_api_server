/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Tet as PrismaTet } from "@prisma/client";

export class TetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TetCountArgs, "select">): Promise<number> {
    return this.prisma.tet.count(args);
  }

  async tets<T extends Prisma.TetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TetFindManyArgs>
  ): Promise<PrismaTet[]> {
    return this.prisma.tet.findMany<Prisma.TetFindManyArgs>(args);
  }
  async tet<T extends Prisma.TetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TetFindUniqueArgs>
  ): Promise<PrismaTet | null> {
    return this.prisma.tet.findUnique(args);
  }
  async createTet<T extends Prisma.TetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TetCreateArgs>
  ): Promise<PrismaTet> {
    return this.prisma.tet.create<T>(args);
  }
  async updateTet<T extends Prisma.TetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TetUpdateArgs>
  ): Promise<PrismaTet> {
    return this.prisma.tet.update<T>(args);
  }
  async deleteTet<T extends Prisma.TetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TetDeleteArgs>
  ): Promise<PrismaTet> {
    return this.prisma.tet.delete(args);
  }
}
