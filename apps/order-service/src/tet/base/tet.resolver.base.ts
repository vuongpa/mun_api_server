/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tet } from "./Tet";
import { TetCountArgs } from "./TetCountArgs";
import { TetFindManyArgs } from "./TetFindManyArgs";
import { TetFindUniqueArgs } from "./TetFindUniqueArgs";
import { CreateTetArgs } from "./CreateTetArgs";
import { UpdateTetArgs } from "./UpdateTetArgs";
import { DeleteTetArgs } from "./DeleteTetArgs";
import { TetService } from "../tet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tet)
export class TetResolverBase {
  constructor(
    protected readonly service: TetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tet",
    action: "read",
    possession: "any",
  })
  async _tetsMeta(
    @graphql.Args() args: TetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tet])
  @nestAccessControl.UseRoles({
    resource: "Tet",
    action: "read",
    possession: "any",
  })
  async tets(@graphql.Args() args: TetFindManyArgs): Promise<Tet[]> {
    return this.service.tets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tet",
    action: "read",
    possession: "own",
  })
  async tet(@graphql.Args() args: TetFindUniqueArgs): Promise<Tet | null> {
    const result = await this.service.tet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tet)
  @nestAccessControl.UseRoles({
    resource: "Tet",
    action: "create",
    possession: "any",
  })
  async createTet(@graphql.Args() args: CreateTetArgs): Promise<Tet> {
    return await this.service.createTet({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tet)
  @nestAccessControl.UseRoles({
    resource: "Tet",
    action: "update",
    possession: "any",
  })
  async updateTet(@graphql.Args() args: UpdateTetArgs): Promise<Tet | null> {
    try {
      return await this.service.updateTet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tet)
  @nestAccessControl.UseRoles({
    resource: "Tet",
    action: "delete",
    possession: "any",
  })
  async deleteTet(@graphql.Args() args: DeleteTetArgs): Promise<Tet | null> {
    try {
      return await this.service.deleteTet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
